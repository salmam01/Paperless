services:
  # PostgreSQL Database
  paperless-db:
    image: postgres:latest
    container_name: paperless-db
    environment:
      POSTGRES_USER: swen3
      POSTGRES_PASSWORD: paperless123
      POSTGRES_DB: PaperlessDB
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swen3 -d PaperlessDB"]
    networks:
      - paperless-network

  # RabbitMQ with Management UI 
  paperless-rabbitmq:
    image: rabbitmq:3-management
    container_name: paperless-rabbitmq
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - paperless-network

  # Backend 
  paperless-rest:
    build:
      context: ./Paperless.REST
      dockerfile: REST.Dockerfile
    container_name: paperless-rest
    ports:
      - "8080:8080"
    depends_on:
      paperless-db:
        condition: service_healthy
      paperless-rabbitmq:
        condition: service_started
    networks:
      - paperless-network

  # Frontend with React
  paperless-frontend:
    build:
      context: ./Paperless.Frontend
      dockerfile: Frontend.Dockerfile
    container_name: paperless-frontend
    ports:
      - "80:80"
    depends_on:
      - paperless-rest
    networks:
      - paperless-network


  # Paperless Services with Workers
  paperless-services:
    build:
      context: ./Paperless.Services
      dockerfile: Services.Dockerfile
    container_name: paperless-services
    depends_on:
      paperless-rabbitmq:
        condition: service_healthy
    ports:
    - "8082:8082"
    networks:
      - paperless-network

networks:
  paperless-network:
    driver: bridge

volumes:
  pgdata: